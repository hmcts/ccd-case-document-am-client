plugins {
  id 'checkstyle'
  id 'java-library'
  id 'maven-publish'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.springframework.boot' version '2.4.4'
  id 'uk.gov.hmcts.java' version '0.12.59'
  id 'com.github.ben-manes.versions' version '0.51.0'
}

def versions = [
    junit       : '5.6.2',
    lombok      : '1.18.32',
    springCloud : '2020.0.6'
]

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "1.0.0"

group 'uk.gov.hmcts.reform'
version buildNumber

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

repositories {
  mavenCentral()
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
  }
}

tasks.register('printVersion') {
  doLast {
    print project.version
  }
}

def pomConfig = {
  licenses {
    license {
      name "MIT License"
      url "http://www.opensource.org/licenses/mit-license.php"
      distribution "repo"
    }
  }

  scm {
    url "https://github.com/hmcts/ccd-case-document-am-client"
  }
}

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier.set('javadoc')
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'ccd-case-document-am-client'
      version project.version

      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'Client library for communicating with CCD case document am client api')
        root.appendNode('name', 'CCD case document am client')
        root.appendNode('url', 'https://github.com/hmcts/ccd-case-document-am-client')

        root.children().last() + pomConfig
      }
    }
  }
}

dependencyManagement {
  applyMavenExclusions = false
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
  }
}

dependencies {
  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.2.1'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.2.1'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.17.0'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', {
    exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
  }
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '3.0.1'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
}

bootJar {
  enabled = false
}

jar {
  enabled = true
}
